// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$String = require("bs-platform/lib/js/string.js");

function toString(size) {
  if (typeof size !== "number") {
    if (size.TAG) {
      return $$String.make(size._0, /* "X" */88) + "L";
    } else {
      return $$String.make(size._0, /* "X" */88) + "S";
    }
  }
  switch (size) {
    case /* Small */0 :
        return "S";
    case /* Medium */1 :
        return "M";
    case /* Large */2 :
        return "L";
    
  }
}

function fromString(str) {
  var s = str.toUpperCase();
  switch (s) {
    case "L" :
        return /* Large */2;
    case "M" :
        return /* Medium */1;
    case "S" :
        return /* Small */0;
    default:
      if (/^X+S$/.test(s)) {
        return {
                TAG: /* XSmall */0,
                _0: s.length - 1 | 0
              };
      } else if (/^X+L$/.test(s)) {
        return {
                TAG: /* XLarge */1,
                _0: s.length - 1 | 0
              };
      } else {
        return ;
      }
  }
}

var Size = {
  toString: toString,
  fromString: fromString
};

function toString$1(cuff) {
  switch (cuff) {
    case /* Button */0 :
        return "button";
    case /* French */1 :
        return "french";
    case /* NoCuff */2 :
        return "none";
    
  }
}

function fromString$1(s) {
  var match = s.toLowerCase();
  switch (match) {
    case "button" :
        return /* Button */0;
    case "french" :
        return /* French */1;
    case "" :
    case "nocuff" :
    case "none" :
        return /* NoCuff */2;
    default:
      return ;
  }
}

var Cuff = {
  toString: toString$1,
  fromString: fromString$1
};

exports.Size = Size;
exports.Cuff = Cuff;
/* No side effect */
