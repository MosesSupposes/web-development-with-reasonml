// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Process = require("process");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Shirts$Chapter7 = require("./Shirts.bs.js");

var cmp = Caml_obj.caml_compare;

var ColorComparator = Belt_Id.MakeComparable({
      cmp: cmp
    });

function colorReducer(accumulatedMap, item) {
  var n = Belt_Map.getWithDefault(accumulatedMap, item.color, 0);
  return Belt_Map.set(accumulatedMap, item.color, n + item.quantity | 0);
}

function printStatistics(orders) {
  var colorDistribution = Belt_List.reduce(orders, Belt_Map.make(ColorComparator), colorReducer);
  console.log("Color", "Quantity");
  return Belt_Map.forEach(colorDistribution, (function (key, value) {
                console.log(Shirts$Chapter7.Color.toString(key), value);
                
              }));
}

function map2(optX, optY, f) {
  if (optX !== undefined && optY !== undefined) {
    return Caml_option.some(Curry._2(f, Caml_option.valFromOption(optX), Caml_option.valFromOption(optY)));
  }
  
}

function lineReducer(acc, line) {
  var items = line.split(",");
  if (items.length !== 7) {
    return acc;
  }
  var orderRecord = map2(map2(map2(map2(map2(map2(map2({
                                quantity: 0,
                                size: /* Small */0,
                                sleeve: /* Short */0,
                                color: /* White */0,
                                pattern: /* Solid */0,
                                cuff: /* Button */0,
                                collar: /* Straight */1
                              }, Shirts$Chapter7.optInt(Caml_array.get(items, 0)), (function (result, n) {
                                  return {
                                          quantity: n,
                                          size: result.size,
                                          sleeve: result.sleeve,
                                          color: result.color,
                                          pattern: result.pattern,
                                          cuff: result.cuff,
                                          collar: result.collar
                                        };
                                })), Shirts$Chapter7.Size.fromString(Caml_array.get(items, 1)), (function (result, sz) {
                              return {
                                      quantity: result.quantity,
                                      size: sz,
                                      sleeve: result.sleeve,
                                      color: result.color,
                                      pattern: result.pattern,
                                      cuff: result.cuff,
                                      collar: result.collar
                                    };
                            })), Shirts$Chapter7.Color.fromString(Caml_array.get(items, 2)), (function (result, c) {
                          return {
                                  quantity: result.quantity,
                                  size: result.size,
                                  sleeve: result.sleeve,
                                  color: c,
                                  pattern: result.pattern,
                                  cuff: result.cuff,
                                  collar: result.collar
                                };
                        })), Shirts$Chapter7.Pattern.fromString(Caml_array.get(items, 3)), (function (result, pat) {
                      return {
                              quantity: result.quantity,
                              size: result.size,
                              sleeve: result.sleeve,
                              color: result.color,
                              pattern: pat,
                              cuff: result.cuff,
                              collar: result.collar
                            };
                    })), Shirts$Chapter7.Collar.fromString(Caml_array.get(items, 4)), (function (result, coll) {
                  return {
                          quantity: result.quantity,
                          size: result.size,
                          sleeve: result.sleeve,
                          color: result.color,
                          pattern: result.pattern,
                          cuff: result.cuff,
                          collar: coll
                        };
                })), Shirts$Chapter7.Sleeve.fromString(Caml_array.get(items, 5)), (function (result, sleeve) {
              return {
                      quantity: result.quantity,
                      size: result.size,
                      sleeve: sleeve,
                      color: result.color,
                      pattern: result.pattern,
                      cuff: result.cuff,
                      collar: result.collar
                    };
            })), Shirts$Chapter7.Cuff.fromString(Caml_array.get(items, 6)), (function (result, cuff) {
          return {
                  quantity: result.quantity,
                  size: result.size,
                  sleeve: result.sleeve,
                  color: result.color,
                  pattern: result.pattern,
                  cuff: cuff,
                  collar: result.collar
                };
        }));
  if (orderRecord !== undefined) {
    return {
            hd: orderRecord,
            tl: acc
          };
  } else {
    return acc;
  }
}

function processFile(inFileName) {
  var fileContents = Fs.readFileSync(inFileName, "utf8");
  var lines = Belt_Array.sliceToEnd(fileContents.split("\n"), 1);
  return printStatistics(Belt_Array.reduce(lines, /* [] */0, lineReducer));
}

var nodeArg = Belt_Array.get(Process.argv, 0);

var progArg = Belt_Array.get(Process.argv, 1);

var fileArg = Belt_Array.get(Process.argv, 2);

if (fileArg !== undefined) {
  processFile(fileArg);
} else if (nodeArg !== undefined && progArg !== undefined) {
  console.log("Usage: " + (nodeArg + (" " + (progArg + " inputfile.csv"))));
} else {
  console.log("How did you get here without NodeJS or aa program to run?");
}

exports.ColorComparator = ColorComparator;
exports.colorReducer = colorReducer;
exports.printStatistics = printStatistics;
exports.map2 = map2;
exports.lineReducer = lineReducer;
exports.processFile = processFile;
exports.nodeArg = nodeArg;
exports.progArg = progArg;
exports.fileArg = fileArg;
/* ColorComparator Not a pure module */
