// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Process = require("process");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function toString(size) {
  if (typeof size !== "number") {
    if (size.TAG) {
      return $$String.make(size._0, /* "X" */88) + "L";
    } else {
      return $$String.make(size._0, /* "X" */88) + "S";
    }
  }
  switch (size) {
    case /* Small */0 :
        return "S";
    case /* Medium */1 :
        return "M";
    case /* Large */2 :
        return "L";
    
  }
}

function fromString(str) {
  var s = str.toUpperCase();
  switch (s) {
    case "L" :
        return /* Large */2;
    case "M" :
        return /* Medium */1;
    case "S" :
        return /* Small */0;
    default:
      if (/^X+S$/.test(s)) {
        return {
                TAG: /* XSmall */0,
                _0: s.length - 1 | 0
              };
      } else if (/^X+L$/.test(s)) {
        return {
                TAG: /* XLarge */1,
                _0: s.length - 1 | 0
              };
      } else {
        return ;
      }
  }
}

var Size = {
  toString: toString,
  fromString: fromString
};

function toString$1(sleeve) {
  switch (sleeve) {
    case /* Short */0 :
        return "short sleeve";
    case /* Long */1 :
        return "long sleeve";
    case /* XLong */2 :
        return "extra-long sleeve";
    
  }
}

function fromString$1(str) {
  var match = str.toLowerCase();
  switch (match) {
    case "long" :
        return /* Long */1;
    case "short" :
        return /* Short */0;
    case "xlong" :
        return /* XLong */2;
    default:
      return ;
  }
}

var Sleeve = {
  toString: toString$1,
  fromString: fromString$1
};

function toString$2(color) {
  switch (color) {
    case /* White */0 :
        return "white";
    case /* Blue */1 :
        return "blue";
    case /* Red */2 :
        return "red";
    case /* Green */3 :
        return "green";
    case /* Brown */4 :
        return "brown";
    
  }
}

function fromString$2(s) {
  var match = s.toLowerCase();
  switch (match) {
    case "blue" :
        return /* Blue */1;
    case "brown" :
        return /* Brown */4;
    case "green" :
        return /* Green */3;
    case "red" :
        return /* Red */2;
    case "white" :
        return /* White */0;
    default:
      return ;
  }
}

var Color = {
  toString: toString$2,
  fromString: fromString$2
};

var cmp = Caml_obj.caml_compare;

var ColorComparator = Belt_Id.MakeComparable({
      cmp: cmp
    });

function toString$3(pattern) {
  switch (pattern) {
    case /* Solid */0 :
        return "solid";
    case /* Pinstripe */1 :
        return "pinstripe";
    case /* Check */2 :
        return "check";
    
  }
}

function fromString$3(s) {
  var match = s.toLowerCase();
  switch (match) {
    case "check" :
    case "checked" :
        return /* Check */2;
    case "pinstripe" :
        return /* Pinstripe */1;
    case "solid" :
        return /* Solid */0;
    default:
      return ;
  }
}

var Pattern = {
  toString: toString$3,
  fromString: fromString$3
};

function toString$4(cuff) {
  switch (cuff) {
    case /* Button */0 :
        return "button";
    case /* French */1 :
        return "french";
    case /* NoCuff */2 :
        return "none";
    
  }
}

function fromString$4(s) {
  var match = s.toLowerCase();
  switch (match) {
    case "button" :
        return /* Button */0;
    case "french" :
        return /* French */1;
    case "" :
    case "nocuff" :
    case "none" :
        return /* NoCuff */2;
    default:
      return ;
  }
}

var Cuff = {
  toString: toString$4,
  fromString: fromString$4
};

function toString$5(collar) {
  switch (collar) {
    case /* Button */0 :
        return "button";
    case /* Straight */1 :
        return "straight";
    case /* Spread */2 :
        return "spread";
    
  }
}

function fromString$5(s) {
  var match = s.toLowerCase();
  switch (match) {
    case "button" :
        return /* Button */0;
    case "spread" :
        return /* Spread */2;
    case "straight" :
        return /* Straight */1;
    default:
      return ;
  }
}

var Collar = {
  toString: toString$5,
  fromString: fromString$5
};

function optFloat(str) {
  var fNum;
  try {
    fNum = Caml_format.caml_float_of_string(str);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Failure") {
      if (exn._1 === "float_of_string") {
        return ;
      }
      throw exn;
    }
    throw exn;
  }
  return fNum;
}

function optInt(str) {
  var anInt;
  try {
    anInt = Caml_format.caml_int_of_string(str);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Failure") {
      if (exn._1 === "int_of_string") {
        return ;
      }
      throw exn;
    }
    throw exn;
  }
  return anInt;
}

function map2(optX, optY, f) {
  if (optX !== undefined && optY !== undefined) {
    return Caml_option.some(Curry._2(f, Caml_option.valFromOption(optX), Caml_option.valFromOption(optY)));
  }
  
}

function lineReducer(acc, line) {
  var items = line.split(",");
  if (items.length !== 7) {
    return acc;
  }
  var orderRecord = map2(map2(map2(map2(map2(map2(map2({
                                quantity: 0,
                                size: /* Small */0,
                                sleeve: /* Short */0,
                                color: /* White */0,
                                pattern: /* Solid */0,
                                cuff: /* Button */0,
                                collar: /* Straight */1
                              }, optInt(Caml_array.get(items, 0)), (function (result, n) {
                                  return {
                                          quantity: n,
                                          size: result.size,
                                          sleeve: result.sleeve,
                                          color: result.color,
                                          pattern: result.pattern,
                                          cuff: result.cuff,
                                          collar: result.collar
                                        };
                                })), fromString(Caml_array.get(items, 1)), (function (result, sz) {
                              return {
                                      quantity: result.quantity,
                                      size: sz,
                                      sleeve: result.sleeve,
                                      color: result.color,
                                      pattern: result.pattern,
                                      cuff: result.cuff,
                                      collar: result.collar
                                    };
                            })), fromString$2(Caml_array.get(items, 2)), (function (result, c) {
                          return {
                                  quantity: result.quantity,
                                  size: result.size,
                                  sleeve: result.sleeve,
                                  color: c,
                                  pattern: result.pattern,
                                  cuff: result.cuff,
                                  collar: result.collar
                                };
                        })), fromString$3(Caml_array.get(items, 3)), (function (result, pat) {
                      return {
                              quantity: result.quantity,
                              size: result.size,
                              sleeve: result.sleeve,
                              color: result.color,
                              pattern: pat,
                              cuff: result.cuff,
                              collar: result.collar
                            };
                    })), fromString$5(Caml_array.get(items, 4)), (function (result, coll) {
                  return {
                          quantity: result.quantity,
                          size: result.size,
                          sleeve: result.sleeve,
                          color: result.color,
                          pattern: result.pattern,
                          cuff: result.cuff,
                          collar: coll
                        };
                })), fromString$1(Caml_array.get(items, 5)), (function (result, sleeve) {
              return {
                      quantity: result.quantity,
                      size: result.size,
                      sleeve: sleeve,
                      color: result.color,
                      pattern: result.pattern,
                      cuff: result.cuff,
                      collar: result.collar
                    };
            })), fromString$4(Caml_array.get(items, 6)), (function (result, cuff) {
          return {
                  quantity: result.quantity,
                  size: result.size,
                  sleeve: result.sleeve,
                  color: result.color,
                  pattern: result.pattern,
                  cuff: cuff,
                  collar: result.collar
                };
        }));
  if (orderRecord !== undefined) {
    return {
            hd: orderRecord,
            tl: acc
          };
  } else {
    return acc;
  }
}

function colorReducer(accumulatedMap, item) {
  var n = Belt_Map.getWithDefault(accumulatedMap, item.color, 0);
  return Belt_Map.set(accumulatedMap, item.color, n + item.quantity | 0);
}

function printStatistics(orders) {
  var colorDistribution = Belt_List.reduce(orders, Belt_Map.make(ColorComparator), colorReducer);
  console.log("Color", "Quantity");
  return Belt_Map.forEach(colorDistribution, (function (key, value) {
                console.log(toString$2(key), value);
                
              }));
}

function processFile(inFileName) {
  var fileContents = Fs.readFileSync(inFileName, "utf8");
  var lines = Belt_Array.sliceToEnd(fileContents.split("\n"), 1);
  return printStatistics(Belt_Array.reduce(lines, /* [] */0, lineReducer));
}

var nodeArg = Belt_Array.get(Process.argv, 0);

var progArg = Belt_Array.get(Process.argv, 1);

var fileArg = Belt_Array.get(Process.argv, 2);

if (fileArg !== undefined) {
  processFile(fileArg);
} else if (nodeArg !== undefined && progArg !== undefined) {
  console.log("Usage: " + (nodeArg + (" " + (progArg + " inputfile.csv"))));
} else {
  console.log("How did you get here without NodeJS or a program to run?");
}

var myOrder = {
  quantity: 2,
  size: /* Medium */1,
  sleeve: /* Long */1,
  color: /* Blue */1,
  pattern: /* Solid */0,
  cuff: /* Button */0,
  collar: /* Button */0
};

exports.Size = Size;
exports.Sleeve = Sleeve;
exports.Color = Color;
exports.ColorComparator = ColorComparator;
exports.Pattern = Pattern;
exports.Cuff = Cuff;
exports.Collar = Collar;
exports.myOrder = myOrder;
exports.optFloat = optFloat;
exports.optInt = optInt;
exports.map2 = map2;
exports.lineReducer = lineReducer;
exports.colorReducer = colorReducer;
exports.printStatistics = printStatistics;
exports.processFile = processFile;
exports.nodeArg = nodeArg;
exports.progArg = progArg;
exports.fileArg = fileArg;
/* ColorComparator Not a pure module */
