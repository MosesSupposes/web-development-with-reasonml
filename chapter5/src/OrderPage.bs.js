// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ShirtSize$Chapter5 = require("./ShirtSize.bs.js");

function commaSplit(s) {
  var pattern = /\s*,\s*/;
  var __x = s.split(pattern);
  return Belt_Array.map(__x, (function (__x) {
                return Belt_Option.getWithDefault(__x, "");
              }));
}

function orderFromCaptures(optCaptures, input) {
  if (optCaptures === undefined) {
    return {
            TAG: /* Error */1,
            _0: input
          };
  }
  var size = ShirtSize$Chapter5.fromString(Caml_array.get(optCaptures, 2));
  if (size !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: [
              Caml_format.caml_int_of_string(Caml_array.get(optCaptures, 1)),
              size
            ]
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: input
          };
  }
}

function toOrder(input) {
  var pattern = /(\d{1,4})\s*@?\s*(S|M|X{0,4}L)/;
  return orderFromCaptures(Caml_option.null_to_opt(input.toUpperCase().match(pattern)), input);
}

function calculateTotalShirts(orders) {
  var adder = function (accumulator, resOrder) {
    if (resOrder.TAG) {
      return accumulator;
    } else {
      return accumulator + resOrder._0[0] | 0;
    }
  };
  return Belt_Array.reduce(orders, 0, adder);
}

var str = "3M, 5 @ S, 7 BAD, 9 XXL";

var nShirts = calculateTotalShirts(Belt_Array.map(commaSplit(str), toOrder));

console.log(nShirts);

function orderPrice(param) {
  return param[0] * ShirtSize$Chapter5.price(param[1]);
}

function addOrderTotal(current, orderResult) {
  if (orderResult.TAG) {
    return current;
  }
  var order = orderResult._0;
  return [
          current[0] + order[0] | 0,
          current[1] + orderPrice(order)
        ];
}

function calculateTotals(orders) {
  return Belt_Array.reduce(orders, [
              0,
              0.0
            ], addOrderTotal);
}

function createRow(anOrder) {
  if (anOrder.TAG) {
    return "<tr><td colspan=\"3\"> Bad input " + anOrder._0 + "</td></tr>\n";
  }
  var match = anOrder._0;
  var size = match[1];
  var n = match[0];
  var totalPrice = orderPrice([
          n,
          size
        ]).toFixed(2);
  var sizeStr = ShirtSize$Chapter5.toString(size);
  return "\n        <tr>\n            <td class=\"right\">" + n + "</td>\n            <td class=\"center\"> " + sizeStr + "</td>\n            <td class=\"right>\$" + totalPrice + "</td>\n        </tr>\n\n    ";
}

function createTable(orderArray) {
  var tableBody = Belt_Array.reduce(orderArray, "", (function (accumulator, item) {
          return accumulator + createRow(item);
        }));
  return "\n    <table>\n        <thead>\n            <tr><th>Quantity</th><th>Size</th><th>Price</th>\n        </thead>\n        <tbody>\n            " + (tableBody + "\n        </tbody>\n    </table>\n  ");
}

function getValue(element) {
  var __x = Belt_Option.map(element, (function (prim) {
          return prim;
        }));
  return Belt_Option.map(__x, (function (prim) {
                return prim.value;
              }));
}

function setInnerHTML(id, htmlString) {
  var __x = document.getElementById(id);
  return Belt_Option.map((__x == null) ? undefined : Caml_option.some(__x), (function (__x) {
                __x.innerHTML = htmlString;
                
              }));
}

function setInnerText(id, textString) {
  var __x = document.getElementById(id);
  return Belt_Option.map((__x == null) ? undefined : Caml_option.some(__x), (function (__x) {
                __x.innerText = textString;
                
              }));
}

function calculate(param) {
  var str = getValue(Caml_option.nullable_to_opt(document.getElementById("orders")));
  if (str === undefined) {
    return ;
  }
  var __x = commaSplit(str);
  var orderArray = Belt_Array.map(Belt_Array.keep(__x, (function (item) {
              return item !== "";
            })), toOrder);
  var match = calculateTotals(orderArray);
  var priceString = match[1].toFixed(2);
  setInnerHTML("table", createTable(orderArray));
  setInnerText("totalShirts", String(match[0]));
  setInnerText("totalPrice", priceString);
  
}

var calcButton = document.getElementById("calculate");

if (!(calcButton == null)) {
  calcButton.addEventListener("click", calculate);
}

var D;

var Doc;

var Elem;

var calcButton$1 = (calcButton == null) ? undefined : Caml_option.some(calcButton);

exports.commaSplit = commaSplit;
exports.orderFromCaptures = orderFromCaptures;
exports.toOrder = toOrder;
exports.calculateTotalShirts = calculateTotalShirts;
exports.str = str;
exports.nShirts = nShirts;
exports.orderPrice = orderPrice;
exports.addOrderTotal = addOrderTotal;
exports.calculateTotals = calculateTotals;
exports.createRow = createRow;
exports.createTable = createTable;
exports.D = D;
exports.Doc = Doc;
exports.Elem = Elem;
exports.getValue = getValue;
exports.setInnerHTML = setInnerHTML;
exports.setInnerText = setInnerText;
exports.calculate = calculate;
exports.calcButton = calcButton$1;
/* nShirts Not a pure module */
